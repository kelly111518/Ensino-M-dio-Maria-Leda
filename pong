let ball;
let leftPaddle;
let rightPaddle;
let leftScore = 0;
let rightScore = 0;

function setup() {
  createCanvas(600, 400);
  ball = new Ball();
  leftPaddle = new Paddle(true);
  rightPaddle = new Paddle(false);
}

function draw() {
  background(0);
  
  // Draw midline
  stroke(255);
  line(width / 2, 0, width / 2, height);
  
  // Draw scores
  fill(255);
  textSize(32);
  text(leftScore, width / 4, 50);
  text(rightScore, 3 * width / 4, 50);
  
  ball.update();
  ball.edges();
  ball.show();
  
  leftPaddle.show();
  rightPaddle.show();
  
  leftPaddle.update();
  rightPaddle.update();
  
  if (ball.hits(leftPaddle)) {
    ball.reflect(1);
  }
  
  if (ball.hits(rightPaddle)) {
    ball.reflect(-1);
  }
  
  if (ball.offScreen()) {
    if (ball.x > width) {
      leftScore++;
    } else {
      rightScore++;
    }
    ball.reset();
  }
}

function keyPressed() {
  if (key == 'W') {
    leftPaddle.move(-1);
  } else if (key == 'S') {
    leftPaddle.move(1);
  }
  
  if (keyCode === UP_ARROW) {
    rightPaddle.move(-1);
  } else if (keyCode === DOWN_ARROW) {
    rightPaddle.move(1);
  }
}

class Ball {
  constructor() {
    this.x = width / 2;
    this.y = height / 2;
    this.xspeed = 5;
    this.yspeed = 5;
    this.r = 10;
  }
  
  update() {
    this.x += this.xspeed;
    this.y += this.yspeed;
  }
  
  edges() {
    if (this.y < 0 || this.y > height) {
      this.yspeed *= -1;
    }
  }
  
  show() {
    fill(255);
    ellipse(this.x, this.y, this.r * 2);
  }
  
  reset() {
    this.x = width / 2;
    this.y = height / 2;
    this.xspeed *= random() > 0.5 ? -1 : 1;
    this.yspeed = 5;
  }
  
  offScreen() {
    return (this.x < 0 || this.x > width);
  }
  
  hits(paddle) {
    if (this.y > paddle.y && this.y < paddle.y + paddle.h && abs(this.x - paddle.x) < this.r) {
      return true;
    }
    return false;
  }
  
  reflect(dir) {
    this.xspeed *= -1;
    this.x += this.xspeed * dir;
    this.yspeed = random(-5, 5);
  }
}

class Paddle {
  constructor(isLeft) {
    this.y = height / 2;
    this.w = 10;
    this.h = 100;
    this.ychange = 0;
    
    if (isLeft) {
      this.x = this.w;
    } else {
      this.x = width - this.w;
    }
  }
  
  update() {
    this.y += this.ychange;
    this.y = constrain(this.y, this.h / 2, height - this.h / 2);
  }
  
  show() {
    fill(255);
    rectMode(CENTER);
    rect(this.x, this.y, this.w, this.h);
  }
  
  move(steps) {
    this.ychange = steps * 10;
  }
}
